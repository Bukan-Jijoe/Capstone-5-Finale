{"description": "For Capstone 5, this is for input data or doc for storing in SQL format database. This database will be use for chatbot about Capstone 5", "icon": null, "icon_bg_color": null, "updated_at": "2024-11-14T07:23:51+00:00", "webhook": false, "id": "7d6a3c6e-c8a6-4434-a33b-a6e5aada0828", "name": "RAG Flow 1_Context Data Preprocessing Sayuran", "is_component": false, "endpoint_name": null, "data": {"nodes": [{"id": "File-sXzjS", "type": "genericNode", "position": {"x": 252.04346923683613, "y": 141.35415513595734}, "data": {"type": "File", "node": {"template": {"_type": "Component", "path": {"trace_as_metadata": true, "file_path": "7d6a3c6e-c8a6-4434-a33b-a6e5aada0828\\2024-11-14_14-49-44_Project Basic Explaination.docx", "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx"], "list": false, "required": false, "placeholder": "", "show": true, "name": "path", "value": "Project Basic Explaination.docx", "display_name": "Path", "advanced": false, "dynamic": false, "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx", "title_case": false, "type": "file", "_input_type": "FileInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "silent_errors": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "silent_errors", "value": false, "display_name": "Silent Errors", "advanced": true, "dynamic": false, "info": "If true, errors will not raise an exception.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "A generic file loader.", "icon": "file-text", "base_classes": ["Data"], "display_name": "File", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "data", "display_name": "Data", "method": "load_file", "value": "__UNDEFINED__", "cache": true}], "field_order": ["path", "silent_errors"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "File-sXzjS"}, "selected": false, "width": 384, "height": 302, "positionAbsolute": {"x": 252.04346923683613, "y": 141.35415513595734}, "dragging": false}, {"id": "SplitText-ReX4K", "type": "genericNode", "position": {"x": 848.2212089549528, "y": 90.6544640887293}, "data": {"type": "SplitText", "node": {"template": {"_type": "Component", "data_inputs": {"trace_as_metadata": true, "list": true, "required": false, "placeholder": "", "show": true, "name": "data_inputs", "value": "", "display_name": "Data Inputs", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "The data to split.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "chunk_overlap": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "chunk_overlap", "value": 50, "display_name": "Chunk Overlap", "advanced": false, "dynamic": false, "info": "Number of characters to overlap between chunks.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "chunk_size": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "chunk_size", "value": 500, "display_name": "Chunk Size", "advanced": false, "dynamic": false, "info": "The maximum number of characters in each chunk.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "separator": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "separator", "value": "\n", "display_name": "Separator", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The character to split on. Defaults to newline.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Split text into chunks based on specified criteria.", "icon": "scissors-line-dashed", "base_classes": ["Data"], "display_name": "Split Text", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Data"], "selected": "Data", "name": "chunks", "display_name": "Chunks", "method": "split_text", "value": "__UNDEFINED__", "cache": true}], "field_order": ["data_inputs", "chunk_overlap", "chunk_size", "separator"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "SplitText-ReX4K"}, "selected": false, "width": 384, "height": 522, "positionAbsolute": {"x": 848.2212089549528, "y": 90.6544640887293}, "dragging": false}, {"id": "Chroma-pwTr4", "type": "genericNode", "position": {"x": 1596.0719132883642, "y": 361.3505342488946}, "data": {"type": "Chroma", "node": {"template": {"_type": "Component", "embedding": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "embedding", "value": "", "display_name": "Embedding", "advanced": false, "input_types": ["Embeddings"], "dynamic": false, "info": "", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "ingest_data": {"trace_as_metadata": true, "list": true, "trace_as_input": true, "required": false, "placeholder": "", "show": true, "name": "ingest_data", "value": "", "display_name": "Ingest Data", "advanced": false, "input_types": ["Data"], "dynamic": false, "info": "", "title_case": false, "type": "other", "_input_type": "DataInput"}, "allow_duplicates": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "allow_duplicates", "value": false, "display_name": "Allow Duplicates", "advanced": true, "dynamic": false, "info": "If false, will not add documents that are already in the Vector Store.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "chroma_server_cors_allow_origins": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "chroma_server_cors_allow_origins", "value": "", "display_name": "Server CORS Allow Origins", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "StrInput"}, "chroma_server_grpc_port": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "chroma_server_grpc_port", "value": "", "display_name": "Server gRPC Port", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "chroma_server_host": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "chroma_server_host", "value": "", "display_name": "Server Host", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "StrInput"}, "chroma_server_http_port": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "chroma_server_http_port", "value": "", "display_name": "Server HTTP Port", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "chroma_server_ssl_enabled": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "chroma_server_ssl_enabled", "value": false, "display_name": "Server SSL Enabled", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma.vectorstores import Chroma\nfrom loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\nfrom langflow.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\nfrom langflow.schema import Data\n\nif TYPE_CHECKING:\n    from langchain_chroma import Chroma\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    Chroma Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"langflow\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"\n        Builds the Chroma object.\n        \"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError:\n            raise ImportError(\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\n            )\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        if self.persist_directory is not None:\n            persist_directory = self.resolve_path(self.persist_directory)\n        else:\n            persist_directory = None\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"\n        Adds documents to the Vector Store.\n        \"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        _stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                _stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in _stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents and self.embedding is not None:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "collection_name": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "collection_name", "value": "Sayuran", "display_name": "Collection Name", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "StrInput"}, "limit": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "limit", "value": "", "display_name": "Limit", "advanced": true, "dynamic": false, "info": "Limit the number of records to compare when Allow Duplicates is False.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "number_of_results": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "number_of_results", "value": 10, "display_name": "Number of Results", "advanced": true, "dynamic": false, "info": "Number of results to return.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "persist_directory": {"trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "persist_directory", "value": "C:\\Users\\suhaimi\\Desktop\\Capstone\\No.5\\Database\\ChromaDB\\Sayuran", "display_name": "Persist Directory", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "StrInput"}, "search_query": {"trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "search_query", "value": "", "display_name": "Search Query", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MultilineInput"}, "search_type": {"trace_as_metadata": true, "options": ["Similarity", "MMR"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "search_type", "value": "Similarity", "display_name": "Search Type", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "DropdownInput"}}, "description": "Chroma Vector Store with search capabilities", "icon": "Chroma", "base_classes": ["Data", "Retriever", "VectorStore"], "display_name": "Chroma DB", "documentation": "https://python.langchain.com/docs/integrations/vectorstores/chroma", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Retriever"], "selected": "Retriever", "name": "base_retriever", "display_name": "Retriever", "method": "build_base_retriever", "value": "__UNDEFINED__", "cache": true}, {"types": ["Data"], "selected": "Data", "name": "search_results", "display_name": "Search Results", "method": "search_documents", "value": "__UNDEFINED__", "cache": true}, {"types": ["VectorStore"], "selected": "VectorStore", "name": "vector_store", "display_name": "Vector Store", "method": "cast_vector_store", "value": "__UNDEFINED__", "cache": true}], "field_order": ["collection_name", "persist_directory", "search_query", "ingest_data", "embedding", "chroma_server_cors_allow_origins", "chroma_server_host", "chroma_server_http_port", "chroma_server_grpc_port", "chroma_server_ssl_enabled", "allow_duplicates", "search_type", "number_of_results", "limit"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "Chroma-pwTr4"}, "selected": true, "width": 384, "height": 660, "positionAbsolute": {"x": 1596.0719132883642, "y": 361.3505342488946}, "dragging": false}, {"id": "OpenAIEmbeddings-Z4khC", "type": "genericNode", "position": {"x": 298.85251540500633, "y": 747.1796007271616}, "data": {"type": "OpenAIEmbeddings", "node": {"template": {"_type": "Component", "chunk_size": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "chunk_size", "value": 1000, "display_name": "Chunk Size", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "client": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "client", "value": "", "display_name": "Client", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "default_headers": {"trace_as_input": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "default_headers", "value": {}, "display_name": "Default Headers", "advanced": true, "dynamic": false, "info": "Default headers to use for the API request.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "default_query": {"trace_as_input": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "default_query", "value": {}, "display_name": "Default Query", "advanced": true, "dynamic": false, "info": "Default query parameters to use for the API request.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "deployment": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "deployment", "value": "", "display_name": "Deployment", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "dimensions": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "dimensions", "value": "", "display_name": "Dimensions", "advanced": true, "dynamic": false, "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "embedding_ctx_length": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "embedding_ctx_length", "value": 1536, "display_name": "Embedding Context Length", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_retries": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "max_retries", "value": 3, "display_name": "Max Retries", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "model": {"trace_as_metadata": true, "options": ["text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"], "combobox": false, "required": false, "placeholder": "", "show": true, "name": "model", "value": "text-embedding-3-small", "display_name": "Model", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "model_kwargs": {"trace_as_input": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "model_kwargs", "value": {}, "display_name": "Model Kwargs", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "openai_api_base": {"load_from_db": false, "required": false, "placeholder": "", "show": true, "name": "openai_api_base", "value": "", "display_name": "OpenAI API Base", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "openai_api_key": {"load_from_db": false, "required": false, "placeholder": "", "show": true, "name": "openai_api_key", "value": null, "display_name": "OpenAI API Key", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "openai_api_type": {"load_from_db": false, "required": false, "placeholder": "", "show": true, "name": "openai_api_type", "value": "", "display_name": "OpenAI API Type", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "openai_api_version": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "openai_api_version", "value": "", "display_name": "OpenAI API Version", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "openai_organization": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "openai_organization", "value": "", "display_name": "OpenAI Organization", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "openai_proxy": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "openai_proxy", "value": "", "display_name": "OpenAI Proxy", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "request_timeout": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "request_timeout", "value": "", "display_name": "Request Timeout", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "float", "_input_type": "FloatInput"}, "show_progress_bar": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "show_progress_bar", "value": false, "display_name": "Show Progress Bar", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "skip_empty": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "skip_empty", "value": false, "display_name": "Skip Empty", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "tiktoken_enable": {"trace_as_metadata": true, "list": false, "required": false, "placeholder": "", "show": true, "name": "tiktoken_enable", "value": true, "display_name": "TikToken Enable", "advanced": true, "dynamic": false, "info": "If False, you must have transformers installed.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "tiktoken_model_name": {"trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "required": false, "placeholder": "", "show": true, "name": "tiktoken_model_name", "value": "", "display_name": "TikToken Model Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Generate embeddings using OpenAI models.", "icon": "OpenAI", "base_classes": ["Embeddings"], "display_name": "OpenAI Embeddings", "documentation": "", "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Embeddings"], "selected": "Embeddings", "name": "embeddings", "display_name": "Embeddings", "method": "build_embeddings", "value": "__UNDEFINED__", "cache": true}], "field_order": ["default_headers", "default_query", "chunk_size", "client", "deployment", "embedding_ctx_length", "max_retries", "model", "model_kwargs", "openai_api_base", "openai_api_key", "openai_api_type", "openai_api_version", "openai_organization", "openai_proxy", "request_timeout", "show_progress_bar", "skip_empty", "tiktoken_model_name", "tiktoken_enable", "dimensions"], "beta": false, "edited": false, "lf_version": "1.0.18"}, "id": "OpenAIEmbeddings-Z4khC"}, "selected": false, "width": 384, "height": 388, "positionAbsolute": {"x": 298.85251540500633, "y": 747.1796007271616}, "dragging": false}], "edges": [{"source": "File-sXzjS", "sourceHandle": "{\u0153dataType\u0153:\u0153File\u0153,\u0153id\u0153:\u0153File-sXzjS\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "SplitText-ReX4K", "targetHandle": "{\u0153fieldName\u0153:\u0153data_inputs\u0153,\u0153id\u0153:\u0153SplitText-ReX4K\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "data_inputs", "id": "SplitText-ReX4K", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "File", "id": "File-sXzjS", "name": "data", "output_types": ["Data"]}}, "id": "reactflow__edge-File-sXzjS{\u0153dataType\u0153:\u0153File\u0153,\u0153id\u0153:\u0153File-sXzjS\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-SplitText-ReX4K{\u0153fieldName\u0153:\u0153data_inputs\u0153,\u0153id\u0153:\u0153SplitText-ReX4K\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}, {"source": "SplitText-ReX4K", "sourceHandle": "{\u0153dataType\u0153:\u0153SplitText\u0153,\u0153id\u0153:\u0153SplitText-ReX4K\u0153,\u0153name\u0153:\u0153chunks\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}", "target": "Chroma-pwTr4", "targetHandle": "{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153Chroma-pwTr4\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "ingest_data", "id": "Chroma-pwTr4", "inputTypes": ["Data"], "type": "other"}, "sourceHandle": {"dataType": "SplitText", "id": "SplitText-ReX4K", "name": "chunks", "output_types": ["Data"]}}, "id": "reactflow__edge-SplitText-ReX4K{\u0153dataType\u0153:\u0153SplitText\u0153,\u0153id\u0153:\u0153SplitText-ReX4K\u0153,\u0153name\u0153:\u0153chunks\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-Chroma-pwTr4{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153Chroma-pwTr4\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}, {"source": "OpenAIEmbeddings-Z4khC", "sourceHandle": "{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-Z4khC\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}", "target": "Chroma-pwTr4", "targetHandle": "{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153Chroma-pwTr4\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "embedding", "id": "Chroma-pwTr4", "inputTypes": ["Embeddings"], "type": "other"}, "sourceHandle": {"dataType": "OpenAIEmbeddings", "id": "OpenAIEmbeddings-Z4khC", "name": "embeddings", "output_types": ["Embeddings"]}}, "id": "reactflow__edge-OpenAIEmbeddings-Z4khC{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-Z4khC\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-Chroma-pwTr4{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153Chroma-pwTr4\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}", "className": ""}], "viewport": {"x": -45.62285703882014, "y": -30.57320535890591, "zoom": 0.7935278471464245}}, "user_id": "c96df815-dae7-4aaa-ac23-645fe392354d", "folder_id": "b8cfb44a-a5f6-41c6-b7d5-222ba2d89396"}